module alu_module(#parameter N=4)
(
  input logic [3:0] a, 
  input logic [3:0] b, 
  input logic [3:0] uc, 
  output logic [3:0] temp_result, 
  output logic [3:0] temp_flags
);

  // const 0 carrys (in & out)
  input logic [3:0] cin = 4b'0000;
  input logic [3:0] cout = 4b'0000;
  
  // operations
  fourBitAdder_module add_operation(a, b, cin, temp_result, flag_add);
  
  fourBitSubstractor_module subs_operation(a, b, result_sub, flag_sub);
  
  and_module and_operation(a, b, result_and, flag_and);
  
  or_module or_operation(a, b, result_or, flag_or);
  
  xor_module xor_operation(a, b, result_xor, flag_xor);
  
  sll_module sll_opertion(a, b, result_sll, flag_sll);
  
  srl_operation srl_operation(a, b, result_srr, flag_srr);

  always @(uc)

    begin
      case (uc)
        0 : 

        1 : 
		
        2 : 

        3 : 

        4 : 

        5 : 

        6 : 

      endcase
    end

endmodule 